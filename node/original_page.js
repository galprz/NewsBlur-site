// Generated by CoffeeScript 2.6.1
(function() {
  var busboy, fs, log, mkdirp, original_page, path;

  path = require('path');

  busboy = require('connect-busboy');

  fs = require('fs');

  mkdirp = require('mkdirp');

  log = require('./log.js');

  original_page = (app) => {
    var DB_PATH, DEV, splitFeedId;
    DEV = process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'docker' || process.env.NODE_ENV === 'debug';
    DB_PATH = DEV ? 'originals' : '/srv/originals';
    app.use(busboy());
    app.get(/^\/original_page\/(\d+)\/?/, (req, res) => {
      var etag, feedId, feedIdDir, filePath, lastModified;
      if (req.query.test) {
        return res.end("OK");
      }
      feedId = parseInt(req.params[0], 10);
      etag = req.header('If-None-Match');
      lastModified = req.header('If-Modified-Since');
      feedIdDir = splitFeedId(feedId);
      filePath = `${DB_PATH}/${feedIdDir}.zhtml`;
      return fs.exists(filePath, function(exists, err) {
        log.debug(`Loading: ${feedId} (${filePath}). ` + `${exists ? "" : "NOT FOUND"}`);
        if (!exists) {
          return res.sendStatus(404);
        }
        return fs.stat(filePath, function(err, stats) {
          if (!err && etag && stats.mtime === etag) {
            return res.sendStatus(304);
          }
          if (!err && lastModified && stats.mtime === lastModified) {
            return res.sendStatus(304);
          }
          return fs.readFile(filePath, function(err, content) {
            res.header('Etag', Date.parse(stats.mtime));
            return res.send(content);
          });
        });
      });
    });
    app.post(/^\/original_page\/(\d+)\/?/, (req, res) => {
      var feedId, feedIdDir;
      feedId = parseInt(req.params[0], 10);
      feedIdDir = splitFeedId(feedId);
      req.pipe(req.busboy);
      return req.busboy.on('file', function(fieldname, file, filename) {
        var filePath, filePathDir;
        // log.debug "Uploading #{fieldname} / #{file} / #{filename}"
        filePath = `${DB_PATH}/${feedIdDir}.zhtml`;
        filePathDir = path.dirname(filePath);
        return mkdirp(filePathDir, function(err) {
          var fstream;
          if (err) {
            log.debug(err);
          }
          fstream = fs.createWriteStream(filePath);
          file.pipe(fstream);
          return fstream.on('close', function() {
            return fs.stat(filePath, function(err, stats) {
              if (err) {
                log.debug(err);
              }
              log.debug(`Saving: ${feedId} (${filePath}) ${stats.size} bytes`);
              return res.send("OK");
            });
          });
        });
      });
    });
    splitFeedId = function(feedId) {
      var rgx;
      feedId += '';
      // x2 = if feedId.length > 1 then '.' + feedId[1] else ''
      rgx = /(\d+)(\d{3})/;
      while (rgx.test(feedId)) {
        feedId = feedId.replace(rgx, '$1' + '/' + '$2');
      }
      return feedId;
    };
    return log.debug(`Starting Original Page server ${DEV ? "on DEV" : "in production"}`);
  };

  exports.original_page = original_page;

}).call(this);
